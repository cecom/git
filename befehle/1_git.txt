== Editor
git config --global core.editor /usr/bin/notepadqq
git config --global core.editor /usr/bin/gedit


== Difftool einrichten
git config --global diff.tool p4mergetool
git config --global difftool.prompt false
git config --global difftool.p4mergetool.cmd '/usr/local/bin/p4merge -dw -tw 4 -C "utf8" $LOCAL $REMOTE'
    
== Prompt
cd ~
git clone https://github.com/magicmonty/bash-git-prompt.git .bash-git-prompt --depth=1

Add to the ~/.bashrc:
  GIT_PROMPT_ONLY_IN_REPO=0
  GIT_PROMPT_SHOW_UPSTREAM=0
  GIT_PROMPT_THEME=Single_line
  source ~/.bash-git-prompt/gitprompt.sh


== Mergetool einrichten
git config --global merge.tool p4mergetool
git config --global merge.renormalize true
git config --global merge.renamelimit 10000 
git config --global mergetool.keepBackup false
git config --global mergetool.keepTemporaries false
git config --global mergetool.prompt false
git config --global mergetool.p4mergetool.cmd '/usr/local/bin/p4merge -dw -tw 4 -C "utf8" "$BASE" "$LOCAL" "$REMOTE" "$MERGED"'


== Sonstiges
[core]
    quotepath = off
    preloadindex = true    
    fscache = true    
    longpaths = true 
[rerere]    
    enabled = true
[color]    
    ui = auto
[push]    
    default = simple
[i18n]    
    commitencoding = utf-8    
    logoutputencoding = utf-8
[branch]    
    autosetupmerge = true    
    autosetuprebase = always

== Aliase
[alias]
    #Zeigt den Status der Workarea und des Index an. Eine Zeile pro Datei.
    s = status -sb
    
    #Zeigt die Commit Historie formatiert an. Eine Zeile pro Commit.
    lg = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr %an)%Creset' --abbrev-commit --date=relative
    
    #Zeigt die letzten 10 benutzten Branches an, in der Reihenfolge der Nutzung.
    b = for-each-ref --count=10 --sort=-committerdate refs/heads/ --format='%(refname:short)'
    
    #Gibt den aktuellen Branch aus. Für die folgenden Aliase benötigt.
    currentbranch = rev-parse --abbrev-ref HEAD
    
    #Gibt für den aktuellen bzw. übergebenen Branch den hinterlegten remote aus. Für die folgenden Aliase benötigt.
    currentremote = "!sh -c \"if [ $# -eq 0 ] ; then \
                            git config branch.$(git currentbranch).remote; \
                          else \
                            git config branch.$1.remote; \
                          fi\""
    
    #Gibt für den aktuellen bzw. übergebenen Branch den hinterlegten merge Branch aus. Für die folgenden Aliase benötigt.
    currentmergebranch = "!sh -c \"if [ $# -eq 0 ] ; then \
                                 git config branch.$(git currentbranch).merge | sed -e 's#^refs/heads/##'; \
                               else \
                                 git config branch.$1.merge | sed -e 's#^refs/heads/##'; \
                               fi\""                      
    
    #Zeigt alle geänderten Dateien an, die ich in meinem aktuellen Branch zum remote geändert habe. Dabei ist es egal, in welchem Commit die Änderung passierte.                              
    dt = "!sh -c \"if [ -z \"$(git currentremote)\" ] ; then \
                  echo "Branch ist nicht richtig konfiguriert!" ; \
               else \
                  git diff-tree -r --name-status \
                     $(if [ \"$(git currentremote)\" != '.' ] ; then \
                        echo "$(git currentremote)/" ; \
                       fi)$(git currentmergebranch)..HEAD ; \
               fi\""
    
    #Zeigt alle Commits und die geänderten Dateien an, die sich zum remote Branch geändert haben.
    lgb = "!sh -c \"if [ -z \"$(git currentremote)\" ] ; then \
                   echo "Branch ist nicht richtig konfiguriert!" ; \
                else \
                   git lg --no-merges --name-status \
                           $( \
                              if [ \"$(git currentremote)\" != '.' ] ; then \
                                 echo "$(git currentremote)/" ; \
                              fi\
                            )$(git currentmergebranch)..HEAD ; \
                fi\""
				
== Script für Testcommits
for i in {1..100} ; do echo "foo $i" >> foo.txt; git add foo.txt; git commit -am "foo $i"; done

echo "mist" >> foo.txt


for i in {1..50} ; do echo "foo $i" >> foo.txt; git add foo.txt; git commit -am "foo $i"; done


== test.sh
grep "mist" foo.txt || exit 0 && exit 1
